version: "3.9"

services:

  backend:
    build:
      context: ./backend
    command: gradle bootRun
    container_name: backend
    ports:
      - 8080:8080
    networks:
      - app-tier
    depends_on:
      - db   
    restart: on-failure
    tty: true

  db:
    image: mysql
    container_name: db
    restart: on-failure
    ports:
      - 3307:3306
    volumes:
      - data_mysql:/var/lib/mysql
    env_file:
      - .env
    networks:
      - app-tier
    tty: true

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - 2181:2181
    networks:
     - app-tier
  
  kafka:
    image: wurstmeister/kafka
    ports:
      - 9092:9092
    container_name: kafka
    restart: on-failure
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=kafka
      - KAFKA_ADVERTISED_PORT=9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CREATE_TOPICS=dresses:1:1,ratings:1:1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
    networks:
      - app-tier
  
  scrapping:
    build:
      context: ./scrapping
    ports:
      - 5000:5000
    environment:
      FLASK_APP: ./app.py
      APP_NAME: scrapping
      FLASK_DEBUG: 1
    container_name: scrapping
    restart: on-failure
    depends_on:
      - kafka
    volumes:
      - ./scrapping:/scrapping/
    networks:
      - app-tier
    tty: true

  nginx:
    build: ./nginx
    ports:
      - 80:80
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    container_name: nginx
    networks:
      - app-tier
    tty: true

networks:
  app-tier:
    driver: bridge

volumes:
  data_mysql: null
