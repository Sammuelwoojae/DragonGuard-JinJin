## 문제점

### iOS

- 호진
    - 데이터 바인딩을 하는 게 어려웠다.
    - API 통신을 한 뒤 받는 데이터가 도착했을 때 비동기 처리하는 부분이 헷갈리고 어려웠다.
    - 검색 입력 기능할 때 사용자가 검색하는 단어를 모두 입력했을 때의 시간을 처리하기 어려워 시간이 많이 들었다.
- 관용
    - 과거에는 쓰였지만 iOS 업그레이드로 인해 쓰이지 않는 함수의 최신 반영 및 처리가 어려웠다.
    - 라이브러리를 효과적으로 쓰기 어려웠다.(SwiftJSON 미사용 등)
    - AutoLayout으로 뷰 배치에 있어서 신경써야 하는 부분이 많았다.

### Android

- 그래프는 빨리 형태는 갖추었지만 세부적인 부분에서 생각보다 오래 걸렸다.
- API 통신을 위한 Retrofit을 post방식을 사용하는데 시간을 좀 많이 쓴 것 같다.
- MVVM 패턴을 적용하는 방법을 강의를 듣지 않고 구글링에만 의존해서 정확히 잘 하였는지 애매하고 다시 개편해야 할 수 있다.

### Backend

- 깃허브 정보를 가져오는 방식이 바뀌기 전까지는 서버의 성능이 스크래핑으로 인해 눈에 보이게 느렸다. 
  방법을 바꾸어 개발하여 성능을 개선해 기존 보다 더 나은 API를 개발할 수 있어 의미있는 과정을 경험하였다. 
  몇번이나 처음부터 다시 개발하는 상황이 발생하여 아쉬운 점도 있었다.

### 그 외

- 원하던 스토리보드 그림이 앱에 맞지 않는 부분이 있었다.
- 앱 아이콘과 배경화면 디자인 요소에 대한 아이디어가 부족했다. (결과적으로 외부 도움 받음)

---

## 리뷰

영수

- Android 기준 UI 구성에 시간을 많이 주고 백엔드 통신같은 기능의 구현에 시간을 조금 부여하여 전체적인 스프린트 소요시간은 비슷하지만 균형이 무너진 것 같았다.

관용

- 초기 설정했던 스프린트에 비해 내 실력이 부족해 공부와 병행하다보니 시간이 오래 걸렸다.
- AutoLayout으로 Custom UI 배치를 하다보니 뷰 간격과 관계를 깊이 생각해야 했다. 
(마치 바둑의 한 수를 오랫동안 두는 듯한 개발 모습)

승진

- 스프린트의 시간은 잘 맞추어 개발했지만 중간중간 터진 이슈들을 수습하느라 시간을 많이 썼던 것이 아쉬웠다. 혼자 도커 설정에 대한 오류들을 다 잡아내느라 원래 진행해야 하는 스프린트에 힘을 쓸 시간이 적었다.

호진

- MVVM 패턴을 적용하기 위해 데이터 바인딩을 사용했는데 아직 실력이 미흡한 것 같다.
- iOS를 둘이서 나누어 개발하다 보니 작업을 정확하게 분리하기가 어려웠다.

---------------------------------------------------------------------------------------------

## 실제 걸린 시간 (단위: H)

`호진`
실제: 60
예상: 47
원인: RxSwift를 활용한 데이터 바인딩으로 인해 시간 지연

`관용`
실제: 58 
예상: 49
원인: 라이브러리 공부 및 AutoLayout 수정으로 인한 지연

`승진`
실제: 75
예상: 68
원인: 도커 설정이 Mac OS와 Windows에서 상이하여 오류 없애는 시간 소요

`영수`
실제: 76 
예상: 78
원인: UI 구성에 시간을 많이 주고 백엔드 통신같은 기능의 구현에 시간을 조금 부여해 차이 발생
