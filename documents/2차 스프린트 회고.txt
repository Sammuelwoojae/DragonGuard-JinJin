## 문제점

### iOS

- 호진
    - 블록체인에 대한 개념을 알고 있었지만 solidity코드로 직접적으로 작성을 해보지 않아서 많이 헤맸던 것 같다.
    - 스프린트 시작 전에 작업 난이도 별로 적절한 포인트를 부여하지 못하였다.
- 관용
    - 스프린트 시작 전, 공부해야 할 것과 알고 있는 것에 대해 명확한 차이를 내지 못했고 작업 난이도 별 포인트 부여에 악영향을 끼쳤다.
    - 상황마다 그래프를 어떻게 나타내야할지(stick 또는 radar) 팀원들과 충분한 상의가 필요했지만 스프린트 도중에 정하게 됐다.

### Android

- MPAndroid의 Radar chart의 x축 label이 길어지면 그래프가 작아지는 문제, Fragment의 이해도 부족으로 lifecycle을 응용하지 못해서 구현이 지연됨
- API연동이나 RecyclerView, viewpager등은 이전에 해본 경험이 있어서 문제없이 구현했음

### Backend

- Caver-java 라이브러리를 이전에 써본 적이 없어 잘 몰랐는데, 참고할 만한 자료가 공식 레퍼런스 밖에 없어 적용시키는 것이 어려웠고, 오류의 원인을 찾는 것에 오랜 시간을 들었다. 
추가로, 완료한 줄 알았던 기능에서 실제 시뮬레이션 중 오류를 발견하는 상황이 몇번 있어서 수정하는 시간이 따로 들었다.

### 그 외

- 로딩화면을 앱의 특성에 맞는 이미지로 변경하면 좋을 것 같다.
- 레포지토리 비교하기부분에서 레이더차트가 작게나와 다른 차트를 고려해보는 것이 좋을 것 같다.
- 앱 아이콘과 티어를 3차 스프린트부터는 적용해서 직접 사용했으면 좋겠다.

---

## 리뷰

영수

- 조금만 더 깊게 공부했었다면 금방 해결할 문제를 장기간 지연시킨것 같아 아쉬웠으며 때로는 단순한 접근방법이 더 효과적일 수 있다는 배움을 얻었다.

관용

- 매일 회의를 해도 내 수준에 대한 자기객관화가 안되면 공부든 프로젝트든 나와 팀원 모두에게 폐를 끼칠 수 있다는 것을 배웠다. 앞으로는 이런 일이 없도록 방향을 잘 잡고 도전해야겠다.

승진

- 블록체인 연동에는 시간을 꽤 쏟았고, 나머지 API를 만드는 부분에 대해서는 기존에 Java 인터페이스를 만들어 놓아 기능을 확장하여 쓸 수 있게 구현했고 
이미 경험한 부분들과 비슷한 과정들이 있어 보다 수월했다. 데브옵스를 다 해놓고 백엔드 개발만 하니 확실히 편한 것 같다.

호진

- 프로젝트를 진행하면 할 수록 파일이 많아져서 프로젝트를 효율적으로 관리할 수 있는 방법을 찾아야할 것 같다. 
다음 스프린트부터는 정확한하게 시간할당을 통해 시간이 넘치는 일이 없도록 해야 겠다.

---

## 실제 걸린 시간 (단위: H)

`호진`

실제: 73

예상: 42

원인: 블록체인 관련한 공부와 어떻게 개발할 것인지에 대한 생각하는 과정이 한참 걸렸고 코드 작성에는 시간이 많이 걸리지 않았지만 블록체인을 배포하는 과정에서 오류가 발생하여 많이 수정을 해야했다. 

`관용`

실제: 92

예상: 46

원인: 철저한 자기객관화 실패였다. 블록체인에 있어서 API 사용과 관련 라이브러리 소스를 효율적으로 사용케 해서 팀원들의 적용 시간을 조금이라도 줄일 수 있었지만, 정작 내 공부와 점검이 부족했다. (리뷰에도 상세히 적음)

`승진`

실제: 34

예상: 67

원인: 블록체인을 제외한 부분을 매우 빠르게 끝냈고, 데브옵스 측면의 문제 발생이 없었어서 예상보다 빠르게 끝냈다. (블록체인: 8h * 3d = 24 / API구현: 3h * 3d = 9 / 문서화: 1h * 1d = 1)

`영수`

실제: 59

예상: 51

원인: 블록체인, Android의 Fragment와 MPAndroid에 대한 이해도 부족으로 인한 지연으로 인하여실제 개발 시간이 많이 길어짐. 
특히 MPAndroid의 Radar Chart부분에서 Chart가 작아지는 현상 해결에 상당히 오래 걸림. 다른 작업들은 빠르게 끝냄.